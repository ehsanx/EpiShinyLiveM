# Number of subjects
nrow(impdata)
DataExplorer::plot_missing(impdata)
# Number of ineligible subjects
#dat.full$ineligible <- 1
#dat.full$ineligible[dat.full$studyid %in% dat.analytic$studyid] <- 0
table(dat.full$ineligible, useNA = "always")
# Subset for ineligible
dat.ineligible <- subset(dat.full, ineligible == 1)
# Create m = 5 datasets with .imp 1 to m = 5
dat31 <- dat.ineligible; dat31$.imp <- 1
dat32 <- dat.ineligible; dat32$.imp <- 2
dat33 <- dat.ineligible; dat33$.imp <- 3
dat34 <- dat.ineligible; dat34$.imp <- 4
dat35 <- dat.ineligible; dat35$.imp <- 5
# Stacked data for ineligible subjects
dat.ineligible.stacked <- rbind(dat31, dat32, dat33, dat34, dat35)
DataExplorer::plot_missing(dat.ineligible.stacked)
names(impdata)
names(dat.ineligible.stacked)
# Categorical age
summary(dat.ineligible.stacked$age)
dat.ineligible.stacked$age.cat <- with(dat.ineligible.stacked,
ifelse(age >= 20 & age < 50, "20-49",
ifelse(age >= 50 & age < 65, "50-64",
ifelse(age >= 65, "65+", NA))))
dat.ineligible.stacked$age.cat <- factor(dat.ineligible.stacked$age.cat,
levels = c("20-49", "50-64", "65+"))
table(dat.ineligible.stacked$age.cat, useNA = "always")
# Recode arthritis
dat.ineligible.stacked$arthritis <- car::recode(dat.ineligible.stacked$rheumatoid,
" 'No' = 'No arthritis'; 'Yes' =
'Rheumatoid arthritis' ", as.factor = T)
# Variable names in the imputed dataset
vars <- names(impdata)
# Set up the dataset for ineligible - same variables as impdata
dat.ineligible.stacked <- dat.ineligible.stacked[, vars]
impdata2 <- rbind(impdata, dat.ineligible.stacked)
impdata2 <- impdata2[order(impdata2$.imp, impdata2$studyid),]
dim(impdata2)
m <- 5
allImputations <- imputationList(lapply(1:m, function(n) subset(impdata2, subset=.imp==n)))
# Step 2: Survey data analysis
w.design0 <- svydesign(ids = ~psu,
weights = ~survey.weight,
strata = ~strata,
data = allImputations,
nest = TRUE) # Design on full data
w.design <- subset(w.design0, ineligible == 0) # Subset the design
dim(w.design)
# Design-adjusted logistic regression
fit <- with(w.design, svyglm(I(cvd == "Yes") ~ arthritis + age.cat + sex + education +
race + income + bmi + smoking + htn + diabetes,
family = quasibinomial))
res <- exp(as.data.frame(cbind(coef(fit[[1]]),
coef(fit[[2]]),
coef(fit[[3]]),
coef(fit[[4]]),
coef(fit[[5]]))))
names(res) <- paste("OR from m =", 1:5)
round(t(res),2)
# Step 3: Pooled estimates
pooled.estimates <- MIcombine(fit)
OR <- round(exp(pooled.estimates$coefficients), 2)
OR <- as.data.frame(OR)
CI <- round(exp(confint(pooled.estimates)), 2)
OR <- cbind(OR, CI)
OR
round(t(res),2)
fit
Publish::publish(fir)
Publish::publish(fit)
Publish::publish(fit[[1]])
?ublish
?publish
Publish::publish(fit[[1]], pvalue.method = NULL)
Publish::publish(fit[[1]], pvalue.method = 'robust')
Publish::publish(fit[[1]], pvalue.method = 'default')
Publish::publish(fit[[1]], pvalue.method = 'simultaneous')
plotRegressionTable(fit[[1]])
plotRegressionTable(summary(fit[[1]]))
summary(fit[[1]]))
summary(fit[[1]])
jtools::plot_summs(fit[[1]])
jtools::summ(fit[[1]])
jtools::plot_summs(fit[[1]])
jtools::plot_summs(fit)
jtools::plot_summs(fit[1])
jtools::plot_summs(fit[[1]])
fit[[1]]
summary(fit[[1]])
summary(fit[[1]], df.resid = degf(w.design.s2))
summary(fit[[1]], df.resid = degf(w.design))
summary(fit[[1]], df.resid = degf(w.design[[1]]))
w.design[[1]]
w.design[[1]][[1]]
summary(fit[[1]], df.resid = degf(w.design[[1]][[1]]))
jtools::plot_summs(fit[[1]],df.resid = degf(w.design[[1]][[1]]))
w.design[[1]][[1]]
degf(w.design[[1]][[1]])
jtools::plot_summs(fit[[1]],df.resid = 15)
jtools::summ(fit[[1]],df.resid = 15)
summary(fit[[1]],df.resid = 15)
publish(fit[[1]],df.resid = 15)
names(publish(fit[[1]]))
publish(fit[[1]])$regressionTable
names(publish(fit[[1]])$regressionTable)
publish(fit[[1]])$regressionTable[,1:4]
x<-publish(fit[[1]])$regressionTable[,1:4]
x
confint.default(fit[[1]],df.resid = 15)
cbind(summary(fit[[1]],df.resid = 15), confint.default(fit[[1]],df.resid = 15))
summary(fit[[1]],df.resid = 15)
names(summary(fit[[1]],df.resid = 15))
coef(summary(fit[[1]],df.resid = 15))
cbind(coef(summary(fit[[1]],df.resid = 15)), confint.default(fit[[1]],df.resid = 15))
df.resid.val <- degf(w.design[[1]][[1]])
df.resid.val
w.design[[1]][[1]]
w.design[[1]][[2]]
w.design[[2]][[2]]
w.design[[1]][[3]]
w.design[[1]][[4]]
w.design[[1]][[5]]
list.res <- vector(mode='list', length=5)
df.resid.val <- degf(w.design[[1]][[i]])
list.res <- vector(mode='list', length=5)
for (i in 1:5){
df.resid.val <- degf(w.design[[1]][[i]])
list.res[[i]] <- cbind(coef(summary(fit[[i]],df.resid = df.resid.val)),
confint.default(fit[[i]],df.resid = df.resid.val))
}
list.res
OR
pooled.estimates <- MIcombine(fit)
OR <- (exp(pooled.estimates$coefficients))
OR <- as.data.frame(OR)
CI <- (exp(confint(pooled.estimates)))
OR <- cbind(OR, CI)
OR
list.res <- vector(mode='list', length=5)
for (i in 1:5){
df.resid.val <- degf(w.design[[1]][[i]])
list.res[[i]] <- exp(cbind(coef(summary(fit[[i]],df.resid = df.resid.val)),
confint.default(fit[[i]],df.resid = df.resid.val)))
}
list.res
list.res <- vector(mode='list', length=5)
for (i in 1:5){
df.resid.val <- degf(w.design[[1]][[i]])
list.res[[i]] <- exp(cbind(coef(summary(fit[[i]],df.resid = df.resid.val)),
confint.default(fit[[i]],df.resid = df.resid.val)))["Estimate","2.5 %","97.5 %"]
}
list.res <- vector(mode='list', length=5)
for (i in 1:5){
df.resid.val <- degf(w.design[[1]][[i]])
list.res[[i]] <- exp(cbind(coef(summary(fit[[i]],df.resid = df.resid.val)),
confint.default(fit[[i]],df.resid = df.resid.val)))[,c("Estimate","2.5 %","97.5 %")]
}
list.res
OR
pooled.estimates <- MIcombine(fit)
OR <- (exp(pooled.estimates$coefficients))
Estimate <- as.data.frame(OR)
CI <- (exp(confint(pooled.estimates)))
OR <- cbind(Estimate, CI)
OR
# Step 3: Pooled estimates
pooled.estimates <- MIcombine(fit)
OR <- (exp(pooled.estimates$coefficients))
Estimate <- as.data.frame(OR)
Estimate
# Step 3: Pooled estimates
pooled.estimates <- MIcombine(fit)
Estimate <- (exp(pooled.estimates$coefficients))
OR <- as.data.frame(Estimate)
CI <- (exp(confint(pooled.estimates)))
OR <- cbind(OR, CI)
OR
# Create the plot
ggplot(OR, aes(x = Estimate, ymin = '2.5 %', ymax = '97.5 %', y = term)) +
geom_point() + # for the point estimates
geom_errorbarh(height = 0.2) + # for the confidence intervals
theme_minimal() +
xlab("Odds Ratio (OR)") +
ylab("") +
ggtitle("Forest Plot of Regression Coefficients")
library(ggplot2)
# Create the plot
ggplot(OR, aes(x = Estimate, ymin = '2.5 %', ymax = '97.5 %', y = term)) +
geom_point() + # for the point estimates
geom_errorbarh(height = 0.2) + # for the confidence intervals
theme_minimal() +
xlab("Odds Ratio (OR)") +
ylab("") +
ggtitle("Forest Plot of Regression Coefficients")
names(OR) <- c("Estimate", "lower", "upper")
names(OR) <- c("Estimate", "lower", "upper")
library(ggplot2)
# Create the plot
ggplot(OR, aes(x = Estimate, ymin = lower, ymax = upper, y = term)) +
geom_point() + # for the point estimates
geom_errorbarh(height = 0.2) + # for the confidence intervals
theme_minimal() +
xlab("Odds Ratio (OR)") +
ylab("") +
ggtitle("Forest Plot of Regression Coefficients")
OR
names(OR) <- c("Estimate", "lower", "upper")
library(ggplot2)
# Create the plot
ggplot(OR, aes(x = Estimate, ymin = lower, ymax = upper, y = term)) +
geom_point() + # for the point estimates
geom_errorbarh(height = 0.2) + # for the confidence intervals
theme_minimal() +
xlab("Odds Ratio (OR)") +
ylab("") +
ggtitle("Forest Plot of Regression Coefficients")
library(tibble)
OR <- rownames_to_column(OR, var = "term")
# Create the plot
ggplot(OR, aes(x = Estimate, ymin = lower, ymax = upper, y = term)) +
geom_point() + # for the point estimates
geom_errorbarh(height = 0.2) + # for the confidence intervals
theme_minimal() +
xlab("Odds Ratio (OR)") +
ylab("") +
ggtitle("Forest Plot of Regression Coefficients")
# Create the plot
ggplot(OR, aes(x = Estimate, ymin = lower, ymax = upper, y = term)) +
geom_point() + # for the point estimates
geom_errorbar(width = 0.2)  + # for the confidence intervals
theme_minimal() +
xlab("Odds Ratio (OR)") +
ylab("") +
ggtitle("Forest Plot of Regression Coefficients")
OR$term <- factor(OR$term, levels = OR$term)
# Create the plot
ggplot(OR, aes(x = Estimate, ymin = lower, ymax = upper, y = term)) +
geom_point() + # for the point estimates
geom_errorbar(width = 0.2)  + # for the confidence intervals
theme_minimal() +
xlab("Odds Ratio (OR)") +
ylab("") +
ggtitle("Forest Plot of Regression Coefficients")
ggplot(OR, aes(x = Estimate, ymin = lower, ymax = upper, y = term)) +
geom_point() + # for the point estimates
geom_errorbar(width = 0.2) + # for the confidence intervals
coord_flip() + # flip coordinates if necessary
theme_minimal() +
xlab("Odds Ratio (OR)") +
ylab("") +
ggtitle("Forest Plot of Regression Coefficients")
OR
OR
names(OR) <- c("Estimate", "lower", "upper")
library(ggplot2)
library(tibble)
OR <- rownames_to_column(OR, var = "term")
OR <- as.data.frame(Estimate)
CI <- (exp(confint(pooled.estimates)))
OR <- cbind(OR, CI)
OR
names(OR) <- c("Estimate", "lower", "upper")
library(ggplot2)
library(tibble)
OR <- rownames_to_column(OR, var = "term")
OR$term <- factor(OR$term, levels = OR$term)
# Create the plot with adjustments
ggplot(OR, aes(x = Estimate, ymin = lower, ymax = upper, y = term)) +
geom_point() + # for the point estimates
geom_errorbar(width = 0.2) + # for the confidence intervals
theme_minimal(base_size = 12) + # adjust base size for overall text
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # rotate x-axis text
labs(x = "Odds Ratio (OR)", y = "", title = "Forest Plot of Regression Coefficients") +
coord_flip() # flip the coordinates if needed
# Create the plot with adjusted text size and plot dimensions
ggplot(OR, aes(x = Estimate, ymin = lower, ymax = upper, y = term)) +
geom_point() + # for the point estimates
geom_errorbar(width = 0.2) + # for the confidence intervals
theme_minimal() +
theme(axis.text.y = element_text(size = 8), # adjust the size of y-axis text
plot.margin = unit(c(1, 1, 1, 1), "cm")) + # adjust plot margins
labs(x = "Odds Ratio (OR)", y = "", title = "Forest Plot of Regression Coefficients")
In this code:
pooled.estimates <- MIcombine(fit)
Estimate <- (exp(pooled.estimates$coefficients))
OR <- as.data.frame(Estimate)
CI <- (exp(confint(pooled.estimates)))
OR <- cbind(OR, CI)
OR
names(OR) <- c("Estimate", "lower", "upper")
pooled.estimates <- MIcombine(fit)
Estimate <- (exp(pooled.estimates$coefficients))
OR <- as.data.frame(Estimate)
CI <- (exp(confint(pooled.estimates)))
OR <- cbind(OR, CI)
names(OR) <- c("Estimate", "lower", "upper")
OR <- rownames_to_column(OR, var = "term")
OR$term <- factor(OR$term, levels = OR$term)
OR
pooled.estimates <- MIcombine(fit)
Estimate <- (exp(pooled.estimates$coefficients))
OR <- as.data.frame(Estimate)
CI <- (exp(confint(pooled.estimates)))
OR <- cbind(OR, CI)
names(OR) <- c("Estimate", "lower", "upper")
OR <- rownames_to_column(OR, var = "term")
OR$term <- factor(OR$term, levels = OR$term)
OR
ggplot(OR, aes(x = Estimate, ymin = lower, ymax = upper, y = term)) +
geom_point() +
geom_errorbar(width = 0.2) +
theme_minimal() +
labs(x = "Odds Ratio (OR)", y = "", title = "Forest Plot of Regression Coefficients") +
coord_flip()
ggplot(OR, aes(y = term, x = Estimate, xmin = lower, xmax = upper)) +
geom_point() +  # for the point estimates
geom_errorbarh(height = 0.2) +  # for the horizontal confidence intervals
theme_minimal() +
labs(x = "Odds Ratio (OR)", y = "", title = "Forest Plot of Regression Coefficients")
OR <- as.data.frame(Estimate)
CI <- (exp(confint(pooled.estimates)))
OR <- cbind(OR, CI)
names(OR) <- c("Estimate", "lower", "upper")
OR <- rownames_to_column(OR, var = "term")
OR$term <- factor(OR$term, levels = OR$term)
OR
ggplot(OR, aes(y = term, x = Estimate, xmin = lower, xmax = upper)) +
geom_point() +  # for the point estimates
geom_errorbarh(height = 0.2) +  # for the horizontal confidence intervals
theme_minimal() +
labs(x = "Odds Ratio (OR)", y = "", title = "Forest Plot of Regression Coefficients")
list.res <- vector(mode='list', length=5)
for (i in 1:5){
df.resid.val <- degf(w.design[[1]][[i]])
list.res[[i]] <- exp(cbind(coef(summary(fit[[i]],df.resid = df.resid.val)),
confint.default(fit[[i]],df.resid = df.resid.val)))[,c("Estimate","2.5 %","97.5 %")]
names(list.res[[i]]) <- c("Estimate", "lower", "upper")
list.res[[i]] <- rownames_to_column(list.res[[i]], var = "term")
list.res[[i]]$term <- factor(list.res[[i]]$term, levels = list.res[[i]]$term)
}
list.res <- vector(mode='list', length=5)
for (i in 1:5){
df.resid.val <- degf(w.design[[1]][[i]])
list.res[[i]] <- exp(cbind(coef(summary(fit[[i]],df.resid = df.resid.val)),
confint.default(fit[[i]],df.resid = df.resid.val)))[,c("Estimate","2.5 %","97.5 %")]
names(list.res[[i]]) <- c("Estimate", "lower", "upper")
res_df <- as.data.frame(res)
res_df <- rownames_to_column(res_df, var = "term")
res_df$term <- factor(res_df$term, levels = res_df$term)
list.res[[i]] <- res_df
}
list.res
list.res <- vector(mode='list', length=5)
for (i in 1:5){
df.resid.val <- degf(w.design[[1]][[i]])
list.res[[i]] <- exp(cbind(coef(summary(fit[[i]],df.resid = df.resid.val)),
confint.default(fit[[i]],df.resid = df.resid.val)))[,c("Estimate","2.5 %","97.5 %")]
names(list.res[[i]]) <- c("Estimate", "lower", "upper")
# res_df <- as.data.frame(res)
# res_df <- rownames_to_column(res_df, var = "term")
# res_df$term <- factor(res_df$term, levels = res_df$term)
# list.res[[i]] <- res_df
}
list.res
list.res <- vector(mode='list', length=5)
for (i in 1:5){
df.resid.val <- degf(w.design[[1]][[i]])
# Extract coefficients and confidence intervals
coef_summary <- coef(summary(fit[[i]], df.resid = df.resid.val))
ci_values <- confint.default(fit[[i]], df.resid = df.resid.val)
# Combine and exponentiate
combined <- cbind(coef_summary[, "Estimate"], ci_values)
combined <- exp(combined)
# Set column names
names(combined) <- c("Estimate", "lower", "upper")
# Convert to data frame and add row names as column
combined_df <- as.data.frame(combined)
combined_df <- rownames_to_column(combined_df, var = "term")
combined_df$term <- factor(combined_df$term, levels = combined_df$term)
list.res[[i]] <- combined_df
}
list.res
coef(summary(fit[[i]], df.resid = df.resid.val))
confint.default(fit[[i]], df.resid = df.resid.val)
cbind(coef_summary[, "Estimate"], ci_values)
# Combine and exponentiate
combined <- cbind(coef_summary[, "Estimate"], ci_values)
names(combined) <- c("Estimate", "lower", "upper")
combined <- exp(combined)
list.res <- vector(mode='list', length=5)
for (i in 1:5){
df.resid.val <- degf(w.design[[1]][[i]])
# Extract coefficients and confidence intervals
coef_summary <- coef(summary(fit[[i]], df.resid = df.resid.val))
ci_values <- confint.default(fit[[i]], df.resid = df.resid.val)
# Combine and exponentiate
combined <- cbind(coef_summary[, "Estimate"], ci_values)
names(combined) <- c("Estimate", "lower", "upper")
combined <- exp(combined)
# Convert to data frame and add row names as column
combined_df <- as.data.frame(combined)
combined_df <- rownames_to_column(combined_df, var = "term")
combined_df$term <- factor(combined_df$term, levels = combined_df$term)
list.res[[i]] <- combined_df
}
list.res
colnames(combined) <- c("Estimate", "lower", "upper")
combined <- exp(combined)
# Convert to data frame and add row names as column
combined_df <- as.data.frame(combined)
combined_df <- rownames_to_column(combined_df, var = "term")
combined_df$term <- factor(combined_df$term, levels = combined_df$term)
list.res[[i]] <- combined_df
list.res
list.res <- vector(mode='list', length=5)
for (i in 1:5){
df.resid.val <- degf(w.design[[1]][[i]])
# Extract coefficients and confidence intervals
coef_summary <- coef(summary(fit[[i]], df.resid = df.resid.val))
ci_values <- confint.default(fit[[i]], df.resid = df.resid.val)
# Combine and exponentiate
combined <- cbind(coef_summary[, "Estimate"], ci_values)
colnames(combined) <- c("Estimate", "lower", "upper")
combined <- exp(combined)
# Convert to data frame and add row names as column
combined_df <- as.data.frame(combined)
combined_df <- rownames_to_column(combined_df, var = "term")
combined_df$term <- factor(combined_df$term, levels = combined_df$term)
list.res[[i]] <- combined_df
}
list.res
ggplot(list.res[[1]], aes(y = term, x = Estimate, xmin = lower, xmax = upper)) +
geom_point() +  # for the point estimates
geom_errorbarh(height = 0.2) +  # for the horizontal confidence intervals
theme_minimal() +
labs(x = "Odds Ratio (OR)", y = "", title = "Forest Plot of Regression Coefficients")
list.res$MI <- OR
ggplot(list.res[[1]], aes(y = term, x = Estimate, xmin = lower, xmax = upper)) +
geom_point() +  # for the point estimates
geom_errorbarh(height = 0.2) +  # for the horizontal confidence intervals
theme_minimal() +
labs(x = "Odds Ratio (OR)", y = "", title = "Forest Plot of Regression Coefficients")
ggplot(list.res$MI, aes(y = term, x = Estimate, xmin = lower, xmax = upper)) +
geom_point() +  # for the point estimates
geom_errorbarh(height = 0.2) +  # for the horizontal confidence intervals
theme_minimal() +
labs(x = "Odds Ratio (OR)", y = "", title = "Forest Plot of Regression Coefficients")
ggplot(list.res[[1]], aes(y = term, x = Estimate, xmin = lower, xmax = upper)) +
geom_point() +  # for the point estimates
geom_errorbarh(height = 0.2) +  # for the horizontal confidence intervals
theme_minimal() +
labs(x = "Odds Ratio (OR)", y = "", title = "Forest Plot of Regression Coefficients")
ggplot(list.res[[2]], aes(y = term, x = Estimate, xmin = lower, xmax = upper)) +
geom_point() +  # for the point estimates
geom_errorbarh(height = 0.2) +  # for the horizontal confidence intervals
theme_minimal() +
labs(x = "Odds Ratio (OR)", y = "", title = "Forest Plot of Regression Coefficients")
ggplot(list.res[[3]], aes(y = term, x = Estimate, xmin = lower, xmax = upper)) +
geom_point() +  # for the point estimates
geom_errorbarh(height = 0.2) +  # for the horizontal confidence intervals
theme_minimal() +
labs(x = "Odds Ratio (OR)", y = "", title = "Forest Plot of Regression Coefficients")
ggplot(list.res[[4]], aes(y = term, x = Estimate, xmin = lower, xmax = upper)) +
geom_point() +  # for the point estimates
geom_errorbarh(height = 0.2) +  # for the horizontal confidence intervals
theme_minimal() +
labs(x = "Odds Ratio (OR)", y = "", title = "Forest Plot of Regression Coefficients")
ggplot(list.res[[5]], aes(y = term, x = Estimate, xmin = lower, xmax = upper)) +
geom_point() +  # for the point estimates
geom_errorbarh(height = 0.2) +  # for the horizontal confidence intervals
theme_minimal() +
labs(x = "Odds Ratio (OR)", y = "", title = "Forest Plot of Regression Coefficients")
ggplot(list.res$MI, aes(y = term, x = Estimate, xmin = lower, xmax = upper)) +
geom_point() +  # for the point estimates
geom_errorbarh(height = 0.2) +  # for the horizontal confidence intervals
theme_minimal() +
labs(x = "Odds Ratio (OR)", y = "", title = "Forest Plot of Regression Coefficients")
edit(list.res)
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
DataExplorer::plot_missing(dat.analytic2)
runApp('app')
list.res$MI
runApp('app')
runApp('app')
runApp('app')
list.res
runApp('app')
list.res <- lapply(list.res, function(df) {
df$has_zero_or_negative <- with(df, Estimate <= 0 | lower <= 0 | upper <= 0)
return(df)
})
list.res <- lapply(list.res, function(df) {
df$has_zero_or_negative <- with(df, Estimate <= 0 | lower <= 0 | upper <= 0)
return(df)
})
list.res
runApp('app')
# Define the paths
getwd()
app_path <- paste0(getwd(), "/app/")
output_path <- paste0(getwd(), "/docs")
# Use the paths in the export function
shinylive::export(app_path, output_path)
httpuv::runStaticServer(paste0(getwd(), "/docs"))
